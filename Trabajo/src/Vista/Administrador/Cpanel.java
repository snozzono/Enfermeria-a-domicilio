/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista.Administrador;

import Controlador.BBDDDAO;
import Controlador.PacienteDAO;
import Controlador.TecnicoDAO;
import Modelo.BBDD;
import Modelo.Paciente;
import Modelo.Tecnico;
import Vista.Actualizadores.ActualizarPaciente;
import Vista.Actualizadores.ActualizarTecnico;
import Vista.Tecnico.Paciente.VentanaPaciente;
import Vista.VentanaPrincipal;
import java.awt.GridBagLayout;
import java.awt.HeadlessException;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Snozz
 */
public class Cpanel extends javax.swing.JFrame {

    /**
     * Creates new form Ppanel
     */
    Tecnico tecnico = new Tecnico();
    TecnicoDAO tecnicoDAO = new TecnicoDAO();

    Paciente paciente = new Paciente();
    PacienteDAO pacienteDAO = new PacienteDAO();

    BBDDDAO bddao = new BBDDDAO();
    BBDD bede = new BBDD();

    public Cpanel() {
        initComponents();
        llenarJtTecnicos();
        llenarJcbTecnicos();
        llenarjbcPacientes();
        llenarjtPacientes();
        setOrigen();
        cambiarTexto();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jbIngresarTecnico = new javax.swing.JButton();
        jbVolver = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtPacientes = new javax.swing.JTable();
        jcbPacientes = new javax.swing.JComboBox<>();
        jbAñadirNuevoTecnico = new javax.swing.JButton();
        btnReasginar = new javax.swing.JButton();
        jcbTecnico = new javax.swing.JComboBox<>();
        btnEliminar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtTecnicos = new javax.swing.JTable();
        btnModificarPaciente = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jbEliminarTecnico = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jbModificar = new javax.swing.JButton();
        btnBuscarTecnico = new javax.swing.JButton();
        btnBuscarPaciente = new javax.swing.JButton();
        txtBuscarTecnico = new javax.swing.JTextField();
        txtBuscarPaciente = new javax.swing.JTextField();
        btnAñadirPaciente = new javax.swing.JButton();
        txtPorcentaje = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel3.setText("Pacientes");

        jbIngresarTecnico.setText("Ingresar como tecnico");
        jbIngresarTecnico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbIngresarTecnicoActionPerformed(evt);
            }
        });

        jbVolver.setText("Volver");
        jbVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbVolverActionPerformed(evt);
            }
        });

        jtPacientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Run", "Nombre", "Diagnostico", "Asginado a"
            }
        ));
        jScrollPane2.setViewportView(jtPacientes);

        jcbPacientes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {  }));
        jcbPacientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbPacientesActionPerformed(evt);
            }
        });

        jbAñadirNuevoTecnico.setText("Añadir nuevo tecnico");
        jbAñadirNuevoTecnico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAñadirNuevoTecnicoActionPerformed(evt);
            }
        });

        btnReasginar.setText("Reasignar tecnico");
        btnReasginar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReasginarActionPerformed(evt);
            }
        });

        jcbTecnico.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {  }));
        jcbTecnico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbTecnicoActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        jtTecnicos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Run", "Usuario", "Contraseña"
            }
        ));
        jScrollPane1.setViewportView(jtTecnicos);

        btnModificarPaciente.setText("Modificar");
        btnModificarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarPacienteActionPerformed(evt);
            }
        });

        jLabel1.setText("Cpanel");

        jbEliminarTecnico.setText("Borrar tecnico");
        jbEliminarTecnico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEliminarTecnicoActionPerformed(evt);
            }
        });

        jLabel2.setText("Tecnicos");

        jbModificar.setText("Modificar tecnico");
        jbModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbModificarActionPerformed(evt);
            }
        });

        btnBuscarTecnico.setText("Buscar");
        btnBuscarTecnico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarTecnicoActionPerformed(evt);
            }
        });

        btnBuscarPaciente.setText("Buscar");
        btnBuscarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarPacienteActionPerformed(evt);
            }
        });

        txtBuscarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuscarPacienteActionPerformed(evt);
            }
        });

        btnAñadirPaciente.setText("Añadir paciente");
        btnAñadirPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAñadirPacienteActionPerformed(evt);
            }
        });

        txtPorcentaje.setText("Actualmente hay: x Tecnicos -> pepe tiene x (y%) pacientes a su haber");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jcbPacientes, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtBuscarPaciente)
                        .addGap(18, 18, 18)
                        .addComponent(btnBuscarPaciente)
                        .addGap(91, 91, 91))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnReasginar)
                        .addGap(18, 18, 18)
                        .addComponent(btnAñadirPaciente)
                        .addGap(18, 18, 18)
                        .addComponent(btnEliminar)
                        .addGap(18, 18, 18)
                        .addComponent(btnModificarPaciente)
                        .addGap(92, 92, 92))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(253, 253, 253)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jbIngresarTecnico)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jbAñadirNuevoTecnico)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jbEliminarTecnico)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jbModificar)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(28, 28, 28)
                                .addComponent(jcbTecnico, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtBuscarTecnico, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnBuscarTecnico)
                                .addGap(140, 140, 140))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jbVolver))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPorcentaje)
                                    .addComponent(jLabel5))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jcbTecnico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarTecnico)
                    .addComponent(txtBuscarTecnico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(txtPorcentaje)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbAñadirNuevoTecnico)
                    .addComponent(jbEliminarTecnico)
                    .addComponent(jbModificar)
                    .addComponent(jbIngresarTecnico))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jcbPacientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarPaciente)
                    .addComponent(txtBuscarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReasginar)
                    .addComponent(btnEliminar)
                    .addComponent(btnModificarPaciente)
                    .addComponent(btnAñadirPaciente))
                .addGap(28, 28, 28)
                .addComponent(jbVolver)
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbIngresarTecnicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbIngresarTecnicoActionPerformed

        String usuarioSeleccionado = jcbTecnico.getSelectedItem().toString();
        int usuario = Integer.parseInt(usuarioSeleccionado);
        if (tecnicoDAO.obtenerTodos().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "No hay tecnicos para elegir");
        } else {
            if (usuarioSeleccionado == null) {
                JOptionPane.showMessageDialog(rootPane, "Selecciona un tecnico");
            } else {

                bede.setTecnico(Integer.parseInt(usuarioSeleccionado));
                bddao.modificarTecnico(bede);

                VentanaPaciente VP = new VentanaPaciente();

                VP.setResizable(false);
                VP.setLocationRelativeTo(null);
                VP.setTitle("Pacientes");
                VP.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);

                JOptionPane.showMessageDialog(this, ("Ingresaste como " + tecnicoDAO.BuscarTecnicoPorRut(Integer.parseInt(usuarioSeleccionado)).getUsuario()));
                VP.setVisible(true);
                dispose();

            }
        }
    }//GEN-LAST:event_jbIngresarTecnicoActionPerformed

    private void jbAñadirNuevoTecnicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAñadirNuevoTecnicoActionPerformed

        VentanaCrearTecnico VACT = new VentanaCrearTecnico();

        VACT.setResizable(false);
        VACT.setLocationRelativeTo(null);
        VACT.setTitle("Crear técnico");
        VACT.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);

        VACT.setVisible(true);
        dispose();
    }//GEN-LAST:event_jbAñadirNuevoTecnicoActionPerformed

    private void jcbTecnicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbTecnicoActionPerformed
        
        int cambio = Integer.parseInt( (String) jcbTecnico.getSelectedItem());
        bede.setTecnico(cambio);
        bddao.modificarTecnico(bede);
        cambiarTexto();
        
        
    }//GEN-LAST:event_jcbTecnicoActionPerformed

    private void jbEliminarTecnicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEliminarTecnicoActionPerformed

        String usuarioSeleccionado = (String) jcbTecnico.getSelectedItem();

        if (usuarioSeleccionado != null) {
            try {
                int e = Integer.parseInt(usuarioSeleccionado);
                String nombre = tecnicoDAO.BuscarTecnicoPorRut(e).getUsuario();
                boolean eliminado = tecnicoDAO.eliminarTecnico(usuarioSeleccionado); //quizá deberia modificar esto para que pase por la bd y no por codigo
                if (eliminado) {
                    // actualizar tabla
                    JOptionPane.showMessageDialog(this, (nombre + " fue retirado de la base de datos exitosamente."));
                    DefaultTableModel modelo = (DefaultTableModel) jtTecnicos.getModel();
                    modelo.setRowCount(0); // Limpiar tabla
                    ArrayList<Tecnico> lista = tecnicoDAO.obtenerTodos();
                    for (Tecnico tmp : lista) {
                        modelo.addRow(new Object[]{tmp.getRun_tec(), tmp.getUsuario(), tmp.getPasswrd()});
                    }
                    // actualizar combobox
                    jcbTecnico.removeAllItems(); // Limpiar los items previos

                    // Obtener la lista de técnicos
                    ArrayList<Tecnico> listaTecnicos = tecnicoDAO.obtenerTodos();

                    // Añadir los usuarios al JComboBox
                    for (Tecnico tec : listaTecnicos) {
                        jcbTecnico.addItem(String.valueOf(tec.getRun_tec()));  // Asumimos que getUsuario() devuelve el nombre de usuario
                    }
                } else {
                    JOptionPane.showMessageDialog(this, ("Hubo un error al retirar a " + nombre));

                }
            } catch (HeadlessException | ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "Por favor, seleccione un técnico para sacarlo de la base de datos..");

            }
        }
    }//GEN-LAST:event_jbEliminarTecnicoActionPerformed

    private void jbModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbModificarActionPerformed

        String usuarioSeleccionado = (String) jcbTecnico.getSelectedItem();

        if (usuarioSeleccionado == null) {
            JOptionPane.showMessageDialog(rootPane, "Elige un tecnico");
        } else {
            bede.setTecnico(Integer.parseInt(usuarioSeleccionado));
            bddao.modificarTecnico(bede);

            ActualizarTecnico AT = new ActualizarTecnico();

            AT.setResizable(false);
            AT.setLocationRelativeTo(null);
            AT.setTitle("Modificar técnico");
            AT.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);

            AT.setVisible(true);
            dispose();
        }
    }//GEN-LAST:event_jbModificarActionPerformed

    private void jcbPacientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbPacientesActionPerformed


    }//GEN-LAST:event_jcbPacientesActionPerformed

    private void jbVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbVolverActionPerformed

        VentanaPrincipal VP = new VentanaPrincipal();

        VP.setResizable(false);
        VP.setLocationRelativeTo(null);
        VP.setTitle("Pacientes");
        VP.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);

        VP.setVisible(true);
        dispose();

    }//GEN-LAST:event_jbVolverActionPerformed

    private void btnBuscarTecnicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarTecnicoActionPerformed
        try {

            DefaultTableModel modelo = (DefaultTableModel) this.jtTecnicos.getModel();
            modelo.setRowCount(0); // Limpiar tabla
            String textoBuscar = txtBuscarTecnico.getText().trim();

            if (textoBuscar.isEmpty()) {

                JOptionPane.showMessageDialog(rootPane, "Ingresa algo");
                llenarJtTecnicos();
                llenarJcbTecnicos();

            } else {
                int runTec = Integer.parseInt(textoBuscar);
                Tecnico paci = tecnicoDAO.BuscarTecnicoPorRut(runTec);
                if (paci != null) {
                    jcbTecnico.removeAllItems();
                    modelo.addRow(new Object[]{paci.getRun_tec(), paci.getUsuario(), paci.getPasswrd()});
                    jcbTecnico.addItem(String.valueOf(paci.getRun_tec()));

                } else {
                    JOptionPane.showMessageDialog(this, "No se encontró un tecnico con el RUN ingresado.", "Información", JOptionPane.INFORMATION_MESSAGE);
                    jcbTecnico.removeAllItems();
                    llenarJtTecnicos();
                    llenarJcbTecnicos();
                }
            }

        } catch (NumberFormatException e) {
            // Mostrar mensaje si el texto ingresado no es un número
            JOptionPane.showMessageDialog(this, "Ingrese un número válido en el campo de búsqueda.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (HeadlessException e) {
            // Capturar errores generales para evitar bloqueos
            JOptionPane.showMessageDialog(this, "Ocurrió un error inesperado: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnBuscarTecnicoActionPerformed

    private void txtBuscarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuscarPacienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBuscarPacienteActionPerformed

    private void btnBuscarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarPacienteActionPerformed

        try {

            DefaultTableModel modelo = (DefaultTableModel) this.jtPacientes.getModel();
            modelo.setRowCount(0); // Limpiar tabla
            String textoBuscar = txtBuscarPaciente.getText().trim();

            if (textoBuscar.isEmpty()) {

                llenarjtPacientes();
                llenarjbcPacientes();

            } else {
                int runTec = Integer.parseInt(textoBuscar);
                Paciente paci = pacienteDAO.buscarPac(runTec);
                if (paci != null) {
                    jcbPacientes.removeAllItems();
                    modelo.addRow(new Object[]{paci.getRun_pac(), paci.getNombre_p(), paci.getDiagn()});
                    jcbPacientes.addItem(String.valueOf(paci.getRun_pac()));
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontró un Paciente con el RUN ingresado.", "Información", JOptionPane.INFORMATION_MESSAGE);
                    jcbPacientes.removeAllItems();
                }
            }

        } catch (NumberFormatException e) {
            // Mostrar mensaje si el texto ingresado no es un número
            JOptionPane.showMessageDialog(this, "Ingrese un número válido en el campo de búsqueda.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (HeadlessException e) {
            // Capturar errores generales para evitar bloqueos
            JOptionPane.showMessageDialog(this, "Ocurrió un error inesperado: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnBuscarPacienteActionPerformed

    private void btnReasginarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReasginarActionPerformed

        DefaultComboBoxModel<Integer> comboModel = new DefaultComboBoxModel();

        TecnicoDAO TDAO = new TecnicoDAO();
        ArrayList<Tecnico> listaTecnicos = TDAO.obtenerTodos();
        for (Tecnico temp : listaTecnicos) {
            comboModel.addElement(temp.getRun_tec());
        }

        if (pacienteDAO.obtenerTodos().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "No hay pacientes para elegir");
        } else if (jcbPacientes.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(rootPane, "Elige un paciente");
        } else {
            JComboBox<Integer> comboBox = new JComboBox<>(comboModel);

            int resultado = JOptionPane.showConfirmDialog(this, comboBox, "Selecciona una opción", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);

            if (resultado == JOptionPane.OK_OPTION) {

                int seleccion = (Integer) comboBox.getSelectedItem();

                int buffer = Integer.parseInt((String) jcbPacientes.getSelectedItem());

                bede.setPaciente(seleccion);
                bddao.modificarPaciente(bede);

                Paciente pacnuevo = pacienteDAO.buscarPac(buffer);
                pacnuevo.setTec_run_tec(seleccion);

                pacienteDAO.modificarPaciente(pacnuevo, buffer);

                JOptionPane.showMessageDialog(rootPane, "Run cambiado");
                llenarjbcPacientes();
                llenarjtPacientes();

                String pepe = String.valueOf(seleccion);

                JOptionPane.showMessageDialog(this, "Has seleccionado" + pepe, "Seleccion", JOptionPane.INFORMATION_MESSAGE);
                llenarJtTecnicos();
                llenarJcbTecnicos();

                /**/
            } else {
                JOptionPane.showMessageDialog(this, "No se realizó ninguna selección", "Cancelado", JOptionPane.WARNING_MESSAGE);
            }

        }


    }//GEN-LAST:event_btnReasginarActionPerformed

    private void btnModificarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarPacienteActionPerformed

        String usuarioSeleccionado = (String) jcbPacientes.getSelectedItem();

        if (usuarioSeleccionado == null) {
            JOptionPane.showMessageDialog(rootPane, "Elige un Paciente");
        } else {
            bede.setPaciente(Integer.parseInt(usuarioSeleccionado));

            ActualizarPaciente AT = new ActualizarPaciente();

            AT.setResizable(false);
            AT.setLocationRelativeTo(null);
            AT.setTitle("Modificar paciente");
            AT.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);

            AT.setVisible(true);
            dispose();
        }

    }//GEN-LAST:event_btnModificarPacienteActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed

        String usuarioSeleccionado = (String) jcbPacientes.getSelectedItem();

        if (usuarioSeleccionado != null) {
            try {
                int e = Integer.parseInt(usuarioSeleccionado);
                String nombre = pacienteDAO.buscarPac(e).getNombre_p();
                boolean eliminado = pacienteDAO.eliminarPaciente(usuarioSeleccionado); //quizá deberia modificar esto para que pase por la bd y no por codigo

                JOptionPane.showMessageDialog(this, (nombre + " fue retirado de la base de datos exitosamente."));
                DefaultTableModel modelo = (DefaultTableModel) jtPacientes.getModel();
                modelo.setRowCount(0); // Limpiar tabla
                ArrayList<Paciente> lista = pacienteDAO.obtenerTodos();
                for (Paciente tmp : lista) {
                    modelo.addRow(new Object[]{tmp.getRun_pac(), tmp.getNombre_p(), tmp.getDiagn()});
                }
                // actualizar combobox
                jcbPacientes.removeAllItems(); // Limpiar los items previos

                // Obtener la lista de técnicos
                ArrayList<Paciente> listaTecnicos = pacienteDAO.obtenerTodos();

                // Añadir los usuarios al JComboBox
                for (Paciente tec : listaTecnicos) {
                    jcbPacientes.addItem(String.valueOf(tec.getRun_pac()));  // Asumimos que getUsuario() devuelve el nombre de usuario
                }

            } catch (HeadlessException | ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "Por favor, seleccione un técnico para sacarlo de la base de datos..");

            }
        }


    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnAñadirPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAñadirPacienteActionPerformed

        VentanaAñadirPacienteconAdmin VAPA = new VentanaAñadirPacienteconAdmin();
        VAPA.setResizable(false);
        VAPA.setLocationRelativeTo(null);
        VAPA.setTitle("Pacientes");
        VAPA.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);

        VAPA.setVisible(true);
        dispose();


    }//GEN-LAST:event_btnAñadirPacienteActionPerformed

    public void llenarJcbTecnicos() {
        TecnicoDAO TDAO = new TecnicoDAO();
        ArrayList<Tecnico> listaTecnicos = TDAO.obtenerTodos();
        this.jcbTecnico.removeAllItems();
        for (Tecnico temp : listaTecnicos) {
            this.jcbTecnico.addItem(String.valueOf(temp.getRun_tec()));

        }
    }

    public void llenarJtTecnicos() {
        DefaultTableModel modelo = (DefaultTableModel) this.jtTecnicos.getModel();
        modelo.setRowCount(0);
        ArrayList<Tecnico> lista = tecnicoDAO.obtenerTodos();
        for (Tecnico tmp : lista) {
            modelo.addRow(new Object[]{tmp.getRun_tec(), tmp.getUsuario(), tmp.getPasswrd()});

        }
    }

    public void setOrigen() {

        bede.setOrigen(2);
        bddao.modificarOrigen(bede);

    }

    public void llenarjbcPacientes() {
        jcbPacientes.setEnabled(true);
        jcbPacientes.removeAllItems();
        ArrayList<Paciente> listaPacientes = pacienteDAO.obtenerTodos();
        for (Paciente temp : listaPacientes) {
            jcbPacientes.addItem(String.valueOf(temp.getRun_pac()));
        }
    }

    public void llenarjtPacientes() {
        DefaultTableModel modelo = (DefaultTableModel) jtPacientes.getModel();
        modelo.setRowCount(0); // Limpiar tabla
        ArrayList<Paciente> lista = pacienteDAO.obtenerTodos();

        for (Paciente tmp : lista) {
            String e = tecnicoDAO.BuscarTecnicoPorRut(tmp.getTec_run_tec()).getUsuario();
            modelo.addRow(new Object[]{tmp.getRun_pac(), tmp.getNombre_p(), tmp.getDiagn(), e});
        }
    }

    public void cambiarTexto() {

        String x;
        ArrayList<Tecnico> lista = tecnicoDAO.obtenerTodos();
        x = String.valueOf(lista.size());

        String y;

        int runTecnico = bddao.buscar().getTecnico();
        ArrayList<Paciente> pacientes = pacienteDAO.obtenerTodos();

        int totalPacientes = pacientes.size();
        int parcialPacientes = 0;

        for (Paciente tmp : pacientes) {
            if (tmp.getTec_run_tec() == runTecnico) {
                parcialPacientes += 1;
            }
        }

        String pepe = tecnicoDAO.BuscarTecnicoPorRut(runTecnico).getUsuario();

        double porcentaje = parcialPacientes / totalPacientes * 100;
        String porcentajeText = String.valueOf(porcentaje);
        String parcialPacientesText = String.valueOf(parcialPacientes);

        if (jcbTecnico.getSelectedItem() == null) {
            txtPorcentaje.setText("Actualmente hay:" + x + "Tecnicos");
        } else {
            txtPorcentaje.setText(pepe + " tiene " + parcialPacientesText + " ( " + porcentajeText + " %) " + " pacientes a su haber");
        }

    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAñadirPaciente;
    private javax.swing.JButton btnBuscarPaciente;
    private javax.swing.JButton btnBuscarTecnico;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnModificarPaciente;
    private javax.swing.JButton btnReasginar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton jbAñadirNuevoTecnico;
    private javax.swing.JButton jbEliminarTecnico;
    private javax.swing.JButton jbIngresarTecnico;
    private javax.swing.JButton jbModificar;
    private javax.swing.JButton jbVolver;
    private javax.swing.JComboBox<String> jcbPacientes;
    private javax.swing.JComboBox<String> jcbTecnico;
    private javax.swing.JTable jtPacientes;
    private javax.swing.JTable jtTecnicos;
    private javax.swing.JTextField txtBuscarPaciente;
    private javax.swing.JTextField txtBuscarTecnico;
    private javax.swing.JLabel txtPorcentaje;
    // End of variables declaration//GEN-END:variables

}
